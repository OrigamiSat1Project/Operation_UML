@startuml
title Initial Operation OBC
participant GS
participant 5R8G
participant RX_COBC
participant TX_COBC
database "main\nEEPROM" as EEPROM1
database "sub\nEEPROM" as EEPROM2
participant OBC
participant EPS
participant RPI


activate OBC

== Start Initial Operation ==

OBC -> OBC: Initialize OBC\n (OBC confirm alive [IOpin50] HIGH)
OBC -> EPS: Initialize EPS\n (EPS-switch all OFF)
activate EPS
EPS --> OBC: ACK
' OBC ->EPS: Measure BAT voltage 
' EPS --> OBC: ACK
deactivate EPS
' OBC ->OBC: Check Satellite-Operation mode\n (depend on EEPROM)
    ' measBAT~checkmode 岩崎＆小出に確認　変更あり？
group [FCTN] READ EEPROM (melting_status)
    OBC -> EEPROM1: Load : melting_status
    activate EEPROM1
    EEPROM1 --> OBC: Send data
    deactivate EEPROM1
    opt I2C error
        OBC -> EEPROM2: Load : melting_status
        activate EEPROM2
        EEPROM2 --> OBC: Send data
        deactivate EEPROM2
        opt I2C error
            OBC -> RX_COBC: Confirm [IOpin49]
            OBC -> OBC: melting_status -> 0x00
        end
    end
end
OBC -> OBC: Calculate melting_status\n sum all(eight) digits
opt melting_status >= 4
    OBC -> OBC: Release task
    OBC -> OBC: Stop Initial Operation\n (IOpin50 LOW)
end
OBC-> OBC: Wait 200sec

== Melting gut of anntena ==

group [FCTN] CONFIRM MELTING
    OBC -> EEPROM1: Load : melting_status
    activate EEPROM1
    EEPROM1 --> OBC: Send data
    deactivate EEPROM1
    opt I2C error
        OBC -> OBC: Release task
        OBC -> OBC: Stop Initial Operation
    end
    OBC -> EEPROM2: Load : melting_status
    activate EEPROM2
    EEPROM2 --> OBC: Send data
    deactivate EEPROM2
    opt I2C error
        OBC -> OBC: Release task
        OBC -> OBC: Stop Initial Operation
    end
    OBC -> OBC: Calculate melting_status of both EEPROM
    opt already melt
        OBC -> OBC: Release task
        OBC -> OBC: Stop Initial Operation
    end
end
loop

    group [FCTN] READ EEPROM (count)    
    end
    OBC -> OBC: Calculate\n melting_count = count % 32\n(decide melt-system or wait uplink)\n melt_time_config = count / (8+24)\n (decide melting time)
    alt melt_time_config = 0
        OBC -> OBC: [melt_time] = 2sec
    else melt_time_config = 1
        OBC -> OBC: [melt_time] = 2.5sec
    else melt_time_config = not 0 or 1
        OBC -> OBC: [melt_time] = 3sec
    end
    OBC -> OBC: melt_time[s] ->[ms]\ndevide 2byte    
    alt melting_count = 0 ~ 3 (normal melt)
        OBC -> OBC: Delay 11.25min
        group  [FCTN] CONFIRM MELTING
        end
        OBC -> EPS: EPS SW10(melting) HIGH
        OBC -> OBC: Delay [melt_time]sec
        OBC -> EPS: EPS SW10(melting) LOW
        OBC -> OBC: Count increment
        OBC -> EEPROM1: Write count
        OBC -> EEPROM2: Write count
        OBC -> OBC: Delay 11.25min
    else melting_count = 4 ~ 7 (Redundancy melt)
        OBC -> OBC: Delay 11.25min
        group [FCTN] CONFIRM MELTING
        end
        OBC -> TX_COBC: Send UART:Redundancy melt
        OBC -> OBC: Count increment
        OBC -> EEPROM1: Write count
        OBC -> EEPROM2: Write count
        OBC -> OBC: Delay 11.25min
    else melting_count = not 0 ~ 7 (wait uplink)
        OBC -> OBC: Delay 30min
        OBC -> OBC: Count increment
        OBC -> EEPROM1: Write count
        OBC -> EEPROM2: Write count
        OBC -> OBC: Delay 30min
    end
    opt count >= 32*4
        OBC -> OBC: count -> 0
    end
end

== Check FM communication ==

GS -> RX_COBC: Uplink
RX_COBC -> OBC : Command: send FM HK
OBC --> TX_COBC: Send FM HK
TX_COBC --> GS: Downlink

== Check 5R8G communication ==

GS -> RX_COBC: Uplink
RX_COBC -> OBC: Command: send mock picture
OBC --> 5R8G: Send mock picture
5R8G --> GS: Downlink

== Check Stereo-Camera operation ==

GS -> RX_COBC: Uplink
RX_COBC -> OBC: Command: check Stereo-Camera 
OBC -> RPI: Command: RPI ON
activate RPI
RPI --> OBC: ACK
OBC -> RPI: Command: send HK
RPI --> OBC: Send HK
OBC -> RPI: Command: take picture
RPI --> OBC: Send picture
OBC -> RPI: Command: RPI OFF
deactivate RPI

OBC --> TX_COBC: Send HK of the part of Stereo-Camera
TX_COBC --> GS: Downlink
OBC --> 5R8G: Send picture
5R8G --> GS: Downlink

== Check Side-Camera operation ==

GS -> RX_COBC: Uplink
RX_COBC -> OBC: Command: check Side-Camera 
OBC -> RPI: Command: RPI ON
activate RPI
RPI --> OBC: ACK 
OBC -> RPI: HK command
RPI --> OBC: Send HK
OBC -> RPI: Command: take picture
RPI --> OBC: Send picture
OBC -> RPI: Command: RPI OFF
deactivate RPI

OBC --> TX_COBC: Send HK of the part of Side-Camera
TX_COBC --> GS: Downlink
OBC --> 5R8G: Send picture
5R8G --> GS: Downlink

@enduml